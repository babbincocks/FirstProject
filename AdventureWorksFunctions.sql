USE AdventureWorks2012

GO

IF (SELECT COUNT(*) 
	FROM INFORMATION_SCHEMA.ROUTINES 
	WHERE ROUTINE_TYPE = 'FUNCTION' 
	AND ROUTINE_CATALOG = 'AdventureWorks2012' 
	AND ROUTINE_NAME = 'fnCCExpire') >= 1
BEGIN
	DROP FUNCTION dbo.fnCCExpire
END

IF (SELECT COUNT(*) 
	FROM INFORMATION_SCHEMA.ROUTINES 
	WHERE ROUTINE_TYPE = 'FUNCTION' 
	AND ROUTINE_CATALOG = 'AdventureWorks2012' 
	AND ROUTINE_NAME = 'fnProvinceTax') >= 1
BEGIN
	DROP FUNCTION dbo.fnProvinceTax
END

IF (SELECT COUNT(*) 
	FROM INFORMATION_SCHEMA.ROUTINES 
	WHERE ROUTINE_TYPE = 'FUNCTION' 
	AND ROUTINE_CATALOG = 'AdventureWorks2012' 
	AND ROUTINE_NAME = 'fnInchToCentimeter') >= 1
BEGIN
	DROP FUNCTION dbo.fnInchToCentimeter
END

IF (SELECT COUNT(*) 
	FROM INFORMATION_SCHEMA.ROUTINES 
	WHERE ROUTINE_TYPE = 'FUNCTION' 
	AND ROUTINE_CATALOG = 'AdventureWorks2012' 
	AND ROUTINE_NAME = 'fnGallontoLiter') >= 1
BEGIN
	DROP FUNCTION dbo.fnGallontoLiter
END

IF (SELECT COUNT(*) 
	FROM INFORMATION_SCHEMA.ROUTINES 
	WHERE ROUTINE_TYPE = 'FUNCTION' 
	AND ROUTINE_CATALOG = 'AdventureWorks2012' 
	AND ROUTINE_NAME = 'fnPoundstoKilograms') >= 1
BEGIN
	DROP FUNCTION dbo.fnPoundstoKilograms
END
GO

CREATE FUNCTION [dbo].[fnCCExpire]
(
@CCNumber AS NVARCHAR(25)
)
RETURNS DATE
AS
BEGIN
	DECLARE  @ExpDate DATE 

	SET @ExpDate = (SELECT CONCAT( ExpYear, '-', ExpMonth, '-01') [Date] FROM Sales.CreditCard WHERE CardNumber = @CCNumber)
	
	SET @ExpDate = EOMONTH(@ExpDate)
	
	RETURN @ExpDate
END
GO
/*
SELECT		CardType, CardNumber, ExpMonth, ExpYear, 
			dbo.fnCCExpire(CardNumber)
FROM		Sales.CreditCard
*/
GO




CREATE FUNCTION [dbo].[fnProvinceTax]
(
@Province INT,
@Tax TINYINT
)
RETURNS SMALLMONEY
AS
BEGIN
	DECLARE @Rate SMALLMONEY

	SET @Rate = (SELECT TaxRate FROM Sales.SalesTaxRate WHERE StateProvinceID = @Province AND TaxType = @Tax)

	IF @Rate IS NULL
		SET @Rate = 0

	RETURN @Rate
END

GO
/*
SELECT		TR.Name, TR.StateProvinceID, TR.TaxType,
			dbo.fnProvinceTax(TR.StateProvinceID, TR.TaxType) FunctionRate, 
			TR.TaxRate 
FROM		Sales.SalesTaxRate TR
*/
GO


CREATE FUNCTION [dbo].[fnInchToCentimeter]
(
@Inches DECIMAL(18,4)
)
RETURNS DECIMAL(18,4)
AS
BEGIN
	DECLARE @Centimeter DECIMAL(18, 4) = (@Inches * 2.54)
	

	RETURN @Centimeter

END
GO

/*
DECLARE @COUNTER INT = 1
DECLARE @TESTVALUE DECIMAL(10,1)

WHILE @COUNTER <= 100
BEGIN
	SET @TESTVALUE = (cast( rand()*10000 as decimal(10,1))*0.1)

	SELECT @TESTVALUE, dbo.fnInchToCentimeter(@TESTVALUE)

	SET @COUNTER = @COUNTER + 1
END 
*/
GO

CREATE FUNCTION [dbo].[fnGallontoLiter]
(
@Gallon DECIMAL(20,10)
)
RETURNS DECIMAL(20,5)
AS
BEGIN
	DECLARE @Liter DECIMAL(20, 10) = (@Gallon * 3.78541)
	SET @Liter = ROUND(@Liter, 5, 0)
	RETURN @Liter

END
GO

/*
DECLARE @COUNTER INT = 1
DECLARE @TESTVALUE DECIMAL(10,1)

WHILE @COUNTER <= 100
BEGIN
	SET @TESTVALUE = (cast( rand()*10000 as decimal(10,1))*0.1)

	SELECT @TESTVALUE, dbo.fnGallontoLiter(@TESTVALUE)

	SET @COUNTER = @COUNTER + 1
END 
*/
GO

CREATE FUNCTION [dbo].[fnPoundstoKilograms]
(
@Pounds DECIMAL(20,10)
)
RETURNS DECIMAL(20,8)
AS BEGIN

DECLARE @Kilos DECIMAL(20, 10) = (@Pounds * 0.453592)
	SET @Kilos = ROUND(@Kilos, 8, 0)
	RETURN @Kilos



END
GO
/*
DECLARE @COUNTER INT = 1
DECLARE @TESTVALUE DECIMAL(10,1)

WHILE @COUNTER <= 100
BEGIN
	SET @TESTVALUE = (cast( rand()*10000 as decimal(10,1))*0.1)

	SELECT @TESTVALUE, dbo.fnPoundstoKilograms(@TESTVALUE)

	SET @COUNTER = @COUNTER + 1
END 
*/